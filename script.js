// Fonctionnalit√© 1 :
// On commence par un petit √©chauffement : lorsque l'utilisateur va cliquer sur le footer (portant le tag <footer>), tu vas afficher le mot "clique" en console.

// Fonctionnalit√© 1 + 1 bis

function countFooter(){
let footer = document.querySelector("footer");
let x = 1
footer.addEventListener("click", function(){ 
  console.log(`clique num√©ro ${x}`);
  x++;
})};
countFooter();
  
// Fonctionnalit√© 1-bis :
// Maintenant on va upgrader cette premi√®re fonctionnalit√© : lorsque l'utilisateur va cliquer sur le footer, tu vas afficher en console "clic num√©ro x" avec x qui commence √† 1 et s'incr√©mente de +1 √† chaque clic.



// Fonctionnalit√© 2 :
// On va enfin faire fonctionner ce satan√© "Hamburger Menu" qui s'affiche depuis le d√©but mais qui n'actionne rien quand on clique dessus. C'est quoi un "hamburger menu" ? C'est √ßa, ce bouton avec trois lignes horizontales en haut √† droite de la navbar.

// Tu vas faire que si quelqu'un clique sur ce bouton, l'√©l√©ment HTML portant l'Id navbarHeader perde sa classe collapse. Une fois que √ßa, √ßa marche, fait que si on clique √† nouveau dessus, la classe collapse soit rajout√©e √† nouveau √† l'√©l√©ment portant l'Id navbarHeader

function menuBurger(){
let btn = document.querySelector(".navbar-toggler");
btn.addEventListener("click", function(){
  document.querySelector("#navbarHeader").classList.toggle("collapse");
})};
menuBurger();


// Fonctionnalit√© 3 :
// √Ä pr√©sent, on va faire cela : si on clique sur le bouton "Edit" de la premi√®re card, le texte de la card va se mettre en rouge de fa√ßon irr√©versible (sauf si on recharge la page). √Ä toi de jouer !

function redText(){
  let btnEdit  = document.querySelector(".btn-outline-secondary")
  let cardText = document.querySelector(".card-text")
  btnEdit.addEventListener("click", function(){
    cardText.style.color = "red"
  })};
 
redText();

//  Fonctionnalit√© 4 :
// On va faire quelque chose de similaire √† la fonctionnalit√© 3 mais un peu plus complexe : si on clique sur le bouton "Edit" de la deuxi√®me card, le texte de la card va se mettre en vert. Si on re-clique dessus, il redevient comme avant ! Tu l'as compris, il va falloir que tu cherches comment faire un "toggle" sur le style du texte. C'est plus compliqu√© que sur une classe.


function greenText(){
  let textCard = document.querySelectorAll('.card-text')[1]
  let btnEdit  = document.querySelectorAll(".btn-outline-secondary")[1]
  btnEdit.addEventListener("click", function(){
    if (textCard.style.color === 'green') {
      textCard.style.color = 'black'
    } else {
      textCard.style.color = 'green'
    }
  })};
 greenText();


//  Fonctionnalit√© 5 :
// Pour le fun, on va impl√©menter une fonctionnalit√© √† la sauce ‚ò¢"nucl√©aire"ü§Ø. Et comme elle est un peu dangereuse, on va la cacher‚Ä¶ Voici comment elle doit marcher : si un utilisateur double clique sur la navbar en haut, tout Bootstrap dispara√Æt et la page s'affiche comme si on avait oubli√© de mettre le CDN qui la relie au fichier CSS. Si possible, rends cette fonctionnalit√© r√©versible (un nouveau double-clic fait tout revenir √† la normale).

function noBoot() {
  let navbar = document.querySelector('.navbar')
  let link = document.querySelector("head > link")
  navbar.addEventListener('dblclick', function() {
    if(link.disabled === false) {
  link.disabled = true;
} else {
  link.disabled = false;
}})};
noBoot();
 

/** Fonctionnalit√© 6 :

T'as d√©j√† impl√©ment√© 5 fonctionnalit√©s d'interaction ! C'est top ! On va commencer √† corser les choses.

La fonctionnalit√© sera la suivante : si un utilisateur passe sa souris sur le bouton "View" d'une card (n'importe laquelle), celle-ci va se r√©duire. Cela veut dire que le texte dispara√Æt, l'image n'appara√Ætra qu'√† 20 % de sa taille d'origine et les boutons "Edit" / "View" restent visibles. Cette fonction sera r√©versible : s'il repasse sa souris, la card redevient normale ! */
function removeCard() {
  let btnView = document.querySelectorAll('.btn-success');
  let image = document.querySelectorAll('.card-img-top');
  let text = document.querySelectorAll('.card-text');
  for (let i = 0; i < btnView.length ; i++)
  btnView[i].addEventListener('mouseover', function(){
    if(text[i].style.visibility !== "hidden")¬†{
    image[i].style.width = "20%";
    text[i].style.visibility = 'hidden';
  } else {
    image[i].style.width = "";
    text[i].style.visibility = 'visible';
  };
  })};
removeCard()
  

// Fonctionnalit√© 7 :
// Allez on va rajouter un peu de WTF dans la page : si un utilisateur clique sur le bouton gris ==>, la derni√®re card (en bas √† droite) va passer en premier (en haut √† gauche). On va pouvoir faire tourner les cards !

function wtf(){
  let btnArrow = document.querySelector(".btn-secondary");
  let parent = document.querySelectorAll('.row')[1];
  btnArrow.addEventListener("click", function(){
    let cardMove = document.querySelectorAll('.col-md-4')[5]
    parent.prepend(cardMove);
  })
};
wtf()



// Fonctionnalit√© 8 :
// √âvidemment tu t'y attendais : on va faire tourner les card dans l'autre sens aussi. Donc si un utilisateur clique sur le bouton bleu <==, la premi√®re card devra passer en dernier. √Ä premi√®re vue, tu te dis que si tu as r√©ussi √† faire la fonctionnalit√© pr√©c√©dente, celle-ci c'est du gateau... sauf qu'il y a quelques pi√®ges. üòà

function wtfReverse(){
  let btnArrowLeft = document.querySelector(".btn-primary");
  let parent = document.querySelectorAll('.row')[1];
  btnArrowLeft.addEventListener("click", function(e){
    e.preventDefault()
    let cardMove = document.querySelectorAll('.col-md-4')[0]
    parent.append(cardMove);
  })
};
wtfReverse()


// Fonctionnalit√© 9 :
// Bon si t'es arriv√© jusque-l√†, c'est que t'as besoin d'un peu de challenge. Du coup je t'ai concoct√© une fonctionnalit√© de derri√®re les fagots, sp√©cialement con√ßue pour les moussaillons pas piqu√©s des hannetons (this sentence is brought to you by www.vieilles-expressions.fr). Voici ce qu'elle va devoir faire :

// La fonctionnalit√© se d√©clenchera si le logo de la page (JS & Events) est s√©lectionn√© et qu'on appuie sur une touche sp√©cifique du clavier.
// Si l'utilisateur presse la touche "a", l'ensemble de la page va √™tre condens√© sur 4 colonnes Bootstrap √† gauche de l'√©cran.
// Si l'utilisateur presse la touche "y", l'ensemble de la page va √™tre condens√© sur 4 colonnes Bootstrap au milieu de l'√©cran.
// Si l'utilisateur presse la touche "p", l'ensemble de la page va √™tre condens√© sur 4 colonnes Bootstrap √† droite de l'√©cran.
// Si l'utilisateur presse la touche "b", tout redevient normal.

function movePage() {
  logo = document.querySelector("div.navbar.navbar-dark.bg-dark.box-shadow > div > a");
  body = document.querySelector("body");
 
    logo.addEventListener('keydown', event => {
      if (event.keyCode === 65) { // A 
        body.classList.remove("col-4");
        body.classList.remove("offset-md-4");
        body.classList.remove("offset-md-8");
        body.classList.add("col-4");
      } else if(event.keyCode === 89 ) { // Y        
        body.classList.remove("col-4");
        body.classList.remove("offset-md-4");
        body.classList.remove("offset-md-8");
        body.classList.add("col-4");
        body.classList.add("offset-md-4");
      } else if (event.keyCode === 80) { // P
        body.classList.remove("col-4");
        body.classList.remove("offset-md-4");
        body.classList.remove("offset-md-8");
        body.classList.add("col-4");
        body.classList.add("offset-md-8");
      } else if (event.keyCode === 66) { // B
        body.classList.remove("col-4");
        body.classList.remove("offset-md-4");
        body.classList.remove("offset-md-8");
      };      
    }); 
};

movePage()

